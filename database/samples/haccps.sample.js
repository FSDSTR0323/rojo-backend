const HACCP_STEPS = require('../../utils/constants/haccpSteps');
const INGREDIENTS_STATUS = require('../../utils/constants/ingredientsStatus');

const haccps = [
  {
    name: 'Chilled storage',
    step: HACCP_STEPS.PREPREPARATION,
    ingredientsStatus: INGREDIENTS_STATUS.CHILLED,
    hazzardControl: [
      'Stored in fridge at temperatures that slow bacterial growth',
      'Stock rotation and foods used within shelf-life',
    ],
    procedure: ['Record fridge temperatures', 'Visuals checks'],
    frequency: ['Twice a day', 'During the day'],
    limits: ['At or below 8ºC'],
    correctiveActions: [
      'Fridge adjusted',
      'Food mooved to another fridge',
      'Discard any food >8oC for longer than 4 hours',
      'Discard out of date food',
    ],
  },
  {
    name: 'Chilled storage',
    step: HACCP_STEPS.PREPREPARATION,
    ingredientsStatus: INGREDIENTS_STATUS.CHILLED,
    hazzardControl: [
      'Contamination with food poisoning bacteria, physical and chemical contaminants',
      'Separation of non-RTE and RTE foods',
      'Covering of foods',
    ],
    procedure: ['Observation'],
    frequency: ['During the day'],
    limits: ['Absence of contamination'],
    correctiveActions: ['Disacard contaminated food'],
  },
  {
    name: 'Frozen storage',
    step: HACCP_STEPS.PREPREPARATION,
    ingredientsStatus: INGREDIENTS_STATUS.FROZEN,
    hazzardControl: [
      'Growth of bacteria',
      'Stored in freezer at temperatures thast inhibit bacterial growth',
    ],
    procedure: ['Freezer temperature recorded'],
    frequency: ['Twice a day'],
    limits: [
      'At or below -18ºC',
      'Ice-cream in a service freezer can be held at -12ºC for no longer than a month and do not must rise above -8ºC',
    ],
    correctiveActions: [
      'Temperature adjusted',
      'Soft frozen food to be discarted',
    ],
  },
  {
    name: 'Dry goods storage',
    step: HACCP_STEPS.PREPREPARATION,
    ingredientsStatus: INGREDIENTS_STATUS.DRY,
    hazzardControl: [
      'Contamination by spoilage bacteria, chemicals, pests and physicals contaminants',
      'Food covered during the storage',
    ],
    procedure: ['Observation'],
    frequency: ['Daily'],
    limits: ['Absence of contamination', 'All food covered'],
    correctiveActions: ['Discard contaminated or infested food'],
  },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
  // {
  //   name: '',
  //   step: HACCP_STEPS.,
  //   ingredientsStatus: INGREDIENTS_STATUS.,
  //   hazzardControl: [],
  //   procedure: [],
  //   frequency: [],
  //   limits: [],
  //   correctiveActions: [],
  // },
];

module.exports = haccps;
